{% import "macros.twig" as macro %}
{% set inputRandomColumn = attribute(inputPrimaryKey, 0) %}
{% set snapshotInputJoinConditionSql = macro.generateJoin(inputPrimaryKey, "snapshot", "input") %}
{% set snapshotPrimaryKeySelect = macro.generateSnapshotPrimaryKey(snapshotPrimaryKeyParts, snapshotPrimaryKeyName, uppercaseColumns) %}
-- SCD2: This method tracks historical data --
-- by creating new records for new/modified data in the snapshot table. --

{% apply noIndent %}
    {% if useDatetime %}
        {% set currentDate = '$CURRENT_TIMESTAMP_TXT' %}
        {% set currentDateForEndDate = currentTimestampMinusOne ? '$CURRENT_TIMESTAMP_TXT_MINUS_SECOND' : '$CURRENT_TIMESTAMP_TXT' %}
        {% set infiniteDate = (endDateValue ~ ' 00:00:00') | quoteValue %}
        -- The start and end dates contain the time ("use_datetime" = true). --
        SET CURRENT_TIMESTAMP = (SELECT CONVERT_TIMEZONE('{{ timezone }}', current_timestamp())::TIMESTAMP_NTZ);
        SET CURRENT_TIMESTAMP_TXT = (SELECT TO_CHAR($CURRENT_TIMESTAMP, 'YYYY-MM-DD HH:Mi:SS'));
        SET CURRENT_TIMESTAMP_TXT_MINUS_SECOND = TO_CHAR(DATEADD(SECOND, -1, $CURRENT_TIMESTAMP), 'YYYY-MM-DD HH:Mi:SS');
    {% else %}
        {% set currentDate = '$CURRENT_DATE_TXT' %}
        {% set currentDateForEndDate = currentTimestampMinusOne ? '$CURRENT_DATE_TXT_MINUS_DAY' : '$CURRENT_DATE_TXT' %}
        {% set infiniteDate = endDateValue | quoteValue %}
        -- The start and end dates DO NOT contain the time ("use_datetime" = false). --
        SET CURRENT_DATE = (SELECT CONVERT_TIMEZONE('{{ timezone }}', current_timestamp()))::DATE;
        SET CURRENT_DATE_TXT = (SELECT TO_CHAR($CURRENT_DATE, 'YYYY-MM-DD'));
        SET CURRENT_DATE_TXT_MINUS_DAY = (SELECT TO_CHAR(DATEADD(DAY, -1, $CURRENT_DATE), 'YYYY-MM-DD'));
    {% endif %}

    {% if keepDeleteActive %}
        {% set deletedEndDate = infiniteDate %}
    {% else %}
        {% set deletedEndDate = currentTimestampMinusOne ? currentDateForEndDate : currentDate %}
    {% endif %}
{% endapply %}

-- Changed records: Input table rows, EXCEPT same rows present in the last snapshot. --
CREATE TABLE "changed_records" AS
    WITH "diff_records" AS (
        -- Actual state. --
        SELECT {{ macro.selectFromColumns(inputColumns, "input.", true) }}
        FROM {{ tableName.input | quoteIdentifier }} input

        EXCEPT

        -- The last snapshot. --
        SELECT {{ macro.selectFromColumns(snapshotInputColumns, "snapshot.") }}
        FROM {{ tableName.currentSnapshot | quoteIdentifier }} snapshot
        WHERE {{ columnName.actual | quoteIdentifier }} = {{ deletedFlagValue.1 }}
    )
    SELECT
        -- Monitored parameters. --
        {{ macro.selectFromColumns(snapshotInputColumns) }},
        -- The start date is set to now. --
        {{ currentDate }} AS {{ columnName.startDate | quoteIdentifier }},
        -- The end date is set to infinity. --
        {{ infiniteDate }} AS {{ columnName.endDate | quoteIdentifier }},
        -- Actual flag is set to "{{ deletedFlagValue.1 }}". --
        {{ deletedFlagValue.1 }} AS {{ columnName.actual | quoteIdentifier }}{% if hasDeletedFlag %},
        -- IsDeleted flag is set to "{{ deletedFlagValue.0 }}". --
        {{ deletedFlagValue.0 }} AS {{ columnName.isDeleted | quoteIdentifier }}{% endif ~%}
    FROM "diff_records";

-- Updated records: Set actual flag to "0" in the previous version. --
CREATE TABLE "updated_records" AS
    SELECT
        -- Monitored parameters. --
        {{ macro.selectFromColumns(snapshotInputColumns, "snapshot.") }},
        -- The start date is preserved. --
        snapshot.{{ columnName.startDate | quoteIdentifier }},
        -- The end date is set to now. --
        {{ currentDateForEndDate }} AS {{ columnName.endDate | quoteIdentifier }},
        -- Actual flag is set to "{{ deletedFlagValue.0 }}", because the new version exists. --
        {{ deletedFlagValue.0 }} AS {{ columnName.actual | quoteIdentifier }}{% if hasDeletedFlag %},
        -- IsDeleted flag is set to "{{ deletedFlagValue.0 }}", because the new version exists. --
        {{ deletedFlagValue.0 }} AS {{ columnName.isDeleted | quoteIdentifier }}{% endif ~%}
    FROM {{ tableName.currentSnapshot | quoteIdentifier }} snapshot
    -- Join "changed_records" and "snapshot" table on the defined primary key
    JOIN "changed_records" changed ON
    {{ macro.generateJoin(inputPrimaryKeyLower, "snapshot", "changed") }}

    WHERE
        -- Only previous actual results are modified. --
        snapshot.{{ columnName.actual | quoteIdentifier }} = {{ deletedFlagValue.1 }}
        -- Exclude records with the current date (and therefore with the same PK). --
        -- This can happen if time is not part of the date, eg. "2020-11-04". --
        -- Row for this PK is then already included in the "last_state". --
        -- TLDR: for each PK, we can have max one row in the new snapshot. --
        AND snapshot.{{ columnName.startDate | quoteIdentifier }} != {{ currentDate }};

-- Deleted records are missing in input table, but have actual "1" in last snapshot. --
CREATE TABLE "deleted_records" AS
    SELECT
        -- Values of the monitored parameters. --
        {{ macro.selectFromColumns(snapshotInputColumns, "snapshot.") }},
        -- The start date is unchanged, it is part of the PK, --
        -- so old values are overwritten by incremental loading. --
        snapshot.{{ columnName.startDate | quoteIdentifier }},
        -- The end date is set to "{{  deletedEndDate  }}" ("keep_del_active" = {{ keepDeleteActive ? 'true' : 'false' }}). --
        {{ deletedEndDate }} AS {{ columnName.endDate | quoteIdentifier }},
        -- The actual flag is set to "{{  deletedActualValue  }}" ("keep_del_active" = {{ keepDeleteActive? 'true' : 'false' }}). --
        {{ deletedActualValue }} AS {{ columnName.actual | quoteIdentifier }}{% if hasDeletedFlag %},
        -- IsDeleted flag is set to "{{ deletedFlagValue.1 }}". --
        {{ deletedFlagValue.1 }} AS {{ columnName.isDeleted | quoteIdentifier }}{% endif ~%}
    FROM {{ tableName.currentSnapshot | quoteIdentifier }} snapshot
    -- Join input and snapshot table on the defined primary key. --
    LEFT JOIN {{ tableName.input | quoteIdentifier }} input ON {{ snapshotInputJoinConditionSql }}
    WHERE
        -- Deleted records are calculated only from the actual records. --
        snapshot.{{ columnName.actual | quoteIdentifier }} = {{ deletedFlagValue.1 }} AND
        -- Record is no more present in the input table. --
        input.{{ inputRandomColumn | quoteIdentifier }} IS NULL;

-- Merge partial results to the new snapshot. --
-- Incremental loading is used to load table in the storage, --
-- so old rows with the same primary key are overwritten. --
CREATE TABLE {{ tableName.newSnapshot | quoteIdentifier }} AS
    -- Changed records: --
    SELECT
        {{ snapshotPrimaryKeySelect }},
        {{ macro.selectFromColumns(snapshotAllColumnsExceptPk, "", false, uppercaseColumns) }}
    FROM "changed_records"
        UNION
    -- Deleted records: --
    SELECT
        {{ snapshotPrimaryKeySelect }},
        {{ macro.selectFromColumns(snapshotAllColumnsExceptPk, "", false, uppercaseColumns) }}
    FROM "deleted_records"
        UNION
    -- Updated previous versions of the changed records: --
    SELECT
        {{ snapshotPrimaryKeySelect }},
        {{ macro.selectFromColumns(snapshotAllColumnsExceptPk, "", false, uppercaseColumns) }}
    FROM "updated_records";


