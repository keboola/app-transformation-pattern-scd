{% import "macros.twig" as macro %}
{% set timezone = config.getTimezone() %}
{% set inputRandomColumn = attribute(inputPrimaryKey, 0) %}
{% set snapshotInputJoinConditionSql = macro.generateJoin(inputPrimaryKey, "snapshot", "input") %}
{% set snapshotPrimaryKeySelect = macro.generateSnapshotPrimaryKey(snapshotPrimaryKeyParts, snapshotPrimaryKeyName) %}

--- SCD4: This method snapshot full current state of the data to the snapshot table

{%- if config.useDatetime() ~%}
    {% set currentDate = '$CURRENT_TIMESTAMP_TXT' %}
    {% set infiniteDate = '9999-12-31 00:00:00' | quoteValue %}
    -- The start and end dates contain the time, because "use_datetime" = true in the configuration. --
    SET CURRENT_TIMESTAMP = (SELECT CONVERT_TIMEZONE('{{ timezone }}', current_timestamp())::TIMESTAMP_NTZ);
    SET CURRENT_TIMESTAMP_TXT = (SELECT TO_CHAR($CURRENT_TIMESTAMP, 'YYYY-MM-DD HH:Mi:SS'));
{%- else ~%}
    {% set currentDate = '$CURRENT_DATE_TXT' %}
    {% set infiniteDate = '9999-12-31' | quoteValue %}
    -- The start and end dates DO NOT contain the time, because "use_datetime" = false in the configuration. --
    SET CURRENT_DATE = (SELECT CONVERT_TIMEZONE('{{ timezone }}', current_timestamp()))::DATE;
    SET CURRENT_DATE_TXT = (SELECT TO_CHAR($CURRENT_DATE, 'YYYY-MM-DD'));
{%- endif -%}

-- Last state: Actual snapshot of the all rows  --
CREATE TABLE "last_state" AS
    SELECT
        -- Values of the monitored parameters. --
        {{ macro.selectFromColumns(inputColumns, "input.", true) }},
        -- The snapshot date is set to now. --
        {{ currentDate }} AS {{ columnName.snapshotDate | quoteIdentifier }},
        -- Actual flag is set to "1". --
        1 AS {{ columnName.actual | quoteIdentifier }},
        -- IsDeleted flag is set to "0". --
        0 AS {{ columnName.isDeleted | quoteIdentifier }}
    FROM {{ tableName.input | quoteIdentifier }} input;

-- Previous state: Set actual flag to "0" in previous version of the records --
CREATE TABLE "previous_state" AS
    SELECT
        -- Values of the monitored parameters. --
        {{ macro.selectFromColumns(snapshotInputColumns, "snapshot.") }},
        -- The snapshot date is preserved. --
        {{ columnName.snapshotDate | quoteIdentifier }},
        -- Actual flag is set to "0". --
        0  AS {{ columnName.actual | quoteIdentifier }}
        -- IsDeleted flag is preserved. --
        snapshot.{{ columnName.isDeleted | quoteIdentifier }}
    FROM {{ tableName.currentSnapshot | quoteIdentifier }} snapshot
    WHERE
        -- Only previous actual results are modified. --
        snapshot.{{ columnName.actual | quoteIdentifier }} = 1 AND
        -- Exclude records with the same snapshot date (and therefore with the same snapshot primary key), eg. "2020-11-04". --
        -- This can happen if time is not part of the date. --
        -- Record with the same start date (and primary key) is already part of the "last_state", --
        -- so we don't want to rewrite it in the "new_snapshot" by incremental loading. --
        -- TLDR: for each primary key, we can have max one row in the new snapshot. --
        snapshot.{{ columnName.snapshotDate | quoteIdentifier }} != {{ currentDate }};

-- Deleted records: They have actual flag set to "1" in snapshot table, but are missing in input table. --
CREATE TABLE "deleted_records" AS
    SELECT
        {{ macro.selectFromColumns(snapshotInputColumns, "snapshot.") }},
        -- The snapshot date is set to now. --
        {{ currentDate }} AS {{ columnName.snapshotDate | quoteIdentifier }},
        -- The actual flag is set to "{{  deletedActualValue  }}" according to "keep_del_active" configuration. --
        {{ deletedActualValue }} AS {{ columnName.actual | quoteIdentifier }},
        -- IsDeleted flag is set to "1". --
        1 AS {{ columnName.isDeleted | quoteIdentifier }}
    FROM {{ tableName.currentSnapshot | quoteIdentifier }} snapshot
    LEFT JOIN {{ tableName.input | quoteIdentifier }} input ON {{ snapshotInputJoinConditionSql }}
    WHERE
        snapshot.{{ columnName.actual | quoteIdentifier }} = 1 AND
        input.{{ inputRandomColumn | quoteIdentifier }} IS NULL;

-- Merge partial results to the new snapshot --
-- Incremental loading is used to load table in the storage, so old rows with the same primary key are overwritten. --
CREATE TABLE {{ tableName.newSnapshot | quoteIdentifier }} AS
    -- New last state: --
    SELECT
        {{ snapshotPrimaryKeySelect }},
        {{ macro.selectFromColumns(snapshotAllColumnsExceptPk) }}
    FROM "last_state"
        UNION
    {% if config.keepDeleteActive() -%}
    -- Deleted records: --
    SELECT
        {{ snapshotPrimaryKeySelect }},
        {{ macro.selectFromColumns(snapshotAllColumnsExceptPk) }}
    FROM "deleted_records"
        UNION
    {% endif -%}
    -- Modified previous state: --
    SELECT
        {{ snapshotPrimaryKeySelect }},
        {{ macro.selectFromColumns(snapshotAllColumnsExceptPk) }}
    FROM "previous_state";
