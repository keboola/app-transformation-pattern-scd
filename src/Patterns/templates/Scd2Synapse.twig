{% import "macros.twig" as macro %}
{% set timezone = config.getTimezone() %}
{% set inputRandomColumn = attribute(inputPrimaryKey, 0) %}
{% set snapshotInputJoinConditionSql = macro.generateJoin(inputPrimaryKey, "snapshot", "input") %}
{% set snapshotPrimaryKeySelect = macro.generateSnapshotPrimaryKey(snapshotPrimaryKeyParts, snapshotPrimaryKeyName) %}
-- SCD2: This method tracks historical data --
-- by creating new records for new/modified data in the snapshot table. --

{% apply noIndent %}
    {% if config.useDatetime() %}
        select
            'datetime' as "key",
            CONVERT(VARCHAR(255), CONVERT(DATETIMEOFFSET, CAST(CURRENT_TIMESTAMP AS DATETIME)) AT TIME ZONE '{{ timezone }}', 20) as "value"
        into "properties";
        -- The start and end dates contain the time ("use_datetime" = true). --
        {% set currentDate = '(SELECT value FROM properties WHERE "key" = \'datetime\')' %}
        {% set infiniteDate = '9999-12-31 00:00:00' | quoteValue %}
    {%- else ~%}
        select
            'date' as "key",
            CONVERT(VARCHAR(255), CONVERT(DATETIMEOFFSET, CAST(CURRENT_TIMESTAMP AS DATE)) AT TIME ZONE '{{ timezone }}', 20) as "value"
        into "properties";
        -- The start and end dates DO NOT contain the time ("use_datetime" = false). --
        {% set currentDate = '(SELECT value FROM properties WHERE "key" = \'date\')' %}
        {% set infiniteDate = '9999-12-31' | quoteValue %}
    {% endif %}

    {% if config.keepDeleteActive() %}
        {% set deletedEndDate = infiniteDate %}
    {% else %}
        {% set deletedEndDate = currentDate %}
    {% endif %}
{% endapply %}

-- Changed records: Input table rows, EXCEPT same rows present in the last snapshot. --
-- Actual state. --
SELECT {{ macro.selectFromColumns(inputColumns, "input.", true) }}
INTO "diff_records"
FROM {{ tableName.input | quoteIdentifier }} input
    EXCEPT
-- The last snapshot. --
SELECT {{ macro.selectFromColumns(snapshotInputColumns, "snapshot.") }}
FROM {{ tableName.currentSnapshot | quoteIdentifier }} snapshot
WHERE {{ columnName.actual | quoteIdentifier }} = 1

SELECT
    -- Monitored parameters. --
    {{ macro.selectFromColumns(snapshotInputColumns) }},
    -- The start date is set to now. --
    {{ currentDate }} AS {{ columnName.startDate | quoteIdentifier }},
    -- The end date is set to infinity. --
    {{ infiniteDate }} AS {{ columnName.endDate | quoteIdentifier }},
    -- Actual flag is set to "1". --
    1 AS {{ columnName.actual | quoteIdentifier }}{% if config.hasDeletedFlag() %},
    -- IsDeleted flag is set to "0". --
    0 AS {{ columnName.isDeleted | quoteIdentifier }}{% endif ~%}
INTO "changed_records"
FROM "diff_records";

-- Updated records: Set actual flag to "0" in the previous version. --
SELECT
    -- Monitored parameters. --
    {{ macro.selectFromColumns(snapshotInputColumns, "snapshot.") }},
    -- The start date is preserved. --
    snapshot.{{ columnName.startDate | quoteIdentifier }},
    -- The end date is set to now. --
    {{ currentDate }} AS {{ columnName.endDate | quoteIdentifier }},
    -- Actual flag is set to "0", because the new version exists. --
    0 AS {{ columnName.actual | quoteIdentifier }}{% if config.hasDeletedFlag() %},
    -- IsDeleted flag is set to "0", because the new version exists. --
    0 AS {{ columnName.isDeleted | quoteIdentifier }}{% endif ~%}
INTO "updated_records"
FROM {{ tableName.currentSnapshot | quoteIdentifier }} snapshot
-- Join "changed_records" and "snapshot" table on the defined primary key
JOIN "changed_records" changed ON
{{ macro.generateJoin(inputPrimaryKeyLower, "snapshot", "changed") }}
WHERE
    -- Only previous actual results are modified. --
    snapshot.{{ columnName.actual | quoteIdentifier }} = 1
    -- Exclude records with the current date (and therefore with the same PK). --
    -- This can happen if time is not part of the date, eg. "2020-11-04". --
    -- Row for this PK is then already included in the "last_state". --
    -- TLDR: for each PK, we can have max one row in the new snapshot. --
    AND snapshot.{{ columnName.startDate | quoteIdentifier }} != {{ currentDate }};

-- Deleted records are missing in input table, but have actual "1" in last snapshot. --
SELECT
    -- Values of the monitored parameters. --
    {{ macro.selectFromColumns(snapshotInputColumns, "snapshot.") }},
    -- The start date is unchanged, it is part of the PK, --
    -- so old values are overwritten by incremental loading. --
    snapshot.{{ columnName.startDate | quoteIdentifier }},
    -- The end date is set to "{{  deletedEndDate  }}" ("keep_del_active" = {{ config.keepDeleteActive() ? 'true' : 'false' }}). --
    {{ deletedEndDate }} AS {{ columnName.endDate | quoteIdentifier }},
    -- The actual flag is set to "{{  deletedActualValue  }}" ("keep_del_active" = {{ config.keepDeleteActive() ? 'true' : 'false' }}). --
    {{ deletedActualValue }} AS {{ columnName.actual | quoteIdentifier }}{% if config.hasDeletedFlag() %},
    -- IsDeleted flag is set to "1". --
    1 AS {{ columnName.isDeleted | quoteIdentifier }}{% endif ~%}
INTO "deleted_records"
FROM {{ tableName.currentSnapshot | quoteIdentifier }} snapshot
-- Join input and snapshot table on the defined primary key. --
LEFT JOIN {{ tableName.input | quoteIdentifier }} input ON {{ snapshotInputJoinConditionSql }}
WHERE
    -- Deleted records are calculated only from the actual records. --
    snapshot.{{ columnName.actual | quoteIdentifier }} = 1 AND
    -- Record is no more present in the input table. --
    input.{{ inputRandomColumn | quoteIdentifier }} IS NULL;

-- Merge partial results to the new snapshot. --
-- Incremental loading is used to load table in the storage, --
-- so old rows with the same primary key are overwritten. --
-- Changed records: --
SELECT
    {{ snapshotPrimaryKeySelect }},
    {{ macro.selectFromColumns(snapshotAllColumnsExceptPk) }}
INTO {{ tableName.newSnapshot | quoteIdentifier }}
FROM "changed_records"
    UNION
-- Deleted records: --
SELECT
    {{ snapshotPrimaryKeySelect }},
    {{ macro.selectFromColumns(snapshotAllColumnsExceptPk) }}
FROM "deleted_records"
    UNION
-- Updated previous versions of the changed records: --
SELECT
    {{ snapshotPrimaryKeySelect }},
    {{ macro.selectFromColumns(snapshotAllColumnsExceptPk) }}
FROM "updated_records";


