{% import "macros.twig" as macro %}
{% set timezone = config.getTimezone() %}
{% set inputRandomColumn = attribute(inputPrimaryKey, 0) %}
{% set snapshotInputJoinConditionSql = macro.generateJoin(inputPrimaryKey, "snapshot", "input") %}
{% set snapshotPrimaryKeySelect = macro.generateSnapshotPrimaryKey(snapshotPrimaryKeyParts, snapshotPrimaryKeyName) %}
-- SCD4: This method snapshot full current state of the data to the snapshot table. --

{% apply noIndent %}
    {%- if config.useDatetime() -%}
        -- The start and end dates contain the time ("use_datetime" = true). --
        SELECT
            'datetime' AS "key",
            CONVERT(VARCHAR(19), CONVERT(DATETIMEOFFSET, CAST(CURRENT_TIMESTAMP AS DATETIME)) AT TIME ZONE '{{ timezone }}', 20) AS "value"
        INTO "properties";
        {% set currentDate = '(SELECT value FROM properties WHERE "key" = \'datetime\')' %}
        {% set infiniteDate = '9999-12-31 00:00:00' | quoteValue %}
    {% else -%}
        -- The start and end dates DO NOT contain the time ("use_datetime" = false). --
        SELECT
            'date' AS "key",
            CONVERT(VARCHAR(10), CONVERT(DATETIMEOFFSET, CAST(CURRENT_TIMESTAMP AS DATE)) AT TIME ZONE '{{ timezone }}', 20) AS "value"
        INTO "properties";
        {% set currentDate = '(SELECT value FROM properties WHERE "key" = \'date\')' %}
        {% set infiniteDate = '9999-12-31' | quoteValue %}
    {% endif %}
{% endapply %}

-- Last state: Actual snapshot of the all rows  --
SELECT
    -- Monitored parameters. --
    {{ macro.selectFromColumns(inputColumns, "input.", true) }},
    -- The snapshot date is set to now. --
    {{ currentDate }} AS {{ columnName.snapshotDate | quoteIdentifier }},
    -- Actual flag is set to "1". --
    1 AS {{ columnName.actual | quoteIdentifier }}{% if config.hasDeletedFlag() %},
    -- IsDeleted flag is set to "0". --
    0 AS {{ columnName.isDeleted | quoteIdentifier }}{% endif ~%}
INTO "last_state"
FROM {{ tableName.input | quoteIdentifier }} input;

-- Previous state: Set actual flag to "0" in the previous version of the records. --
SELECT
    -- Monitored parameters. --
    {{ macro.selectFromColumns(snapshotInputColumns, "snapshot.") }},
    -- The snapshot date is preserved. --
    {{ columnName.snapshotDate | quoteIdentifier }},
    -- Actual flag is set to "0". --
    0  AS {{ columnName.actual | quoteIdentifier }}{% if config.hasDeletedFlag() %},
    -- IsDeleted flag is preserved. --
    snapshot.{{ columnName.isDeleted | quoteIdentifier }}{% endif ~%}
INTO "previous_state"
FROM {{ tableName.currentSnapshot | quoteIdentifier }} snapshot
WHERE
    -- Only the last results are modified. --
    snapshot.{{ columnName.actual | quoteIdentifier }} = 1
    -- Exclude records with the current date (and therefore with the same PK). --
    -- This can happen if time is not part of the date, eg. "2020-11-04". --
    -- Row for this PK is then already included in the "last_state". --
    -- TLDR: for each PK, we can have max one row in the new snapshot. --
    AND snapshot.{{ columnName.snapshotDate | quoteIdentifier }} != {{ currentDate }};

{% if generateDeletedRecords -%}
-- Deleted records are generated: --
-- if "has_deleted_flag" = true OR "keep_del_active" = true --
-- Detection: Deleted records have actual flag set to "1" --
-- in the snapshot table, but are missing in input table. --
SELECT
    {{ macro.selectFromColumns(snapshotInputColumns, "snapshot.") }},
    -- The snapshot date is set to now. --
    {{ currentDate }} AS {{ columnName.snapshotDate | quoteIdentifier }},
    -- The actual flag is set to "{{  deletedActualValue  }}" ("keep_del_active" = {{ config.keepDeleteActive() ? 'true' : 'false' }}). --
    {{ deletedActualValue }} AS {{ columnName.actual | quoteIdentifier }}{% if config.hasDeletedFlag() %},
    -- IsDeleted flag is set to "1". --
    1 AS {{ columnName.isDeleted | quoteIdentifier }}{% endif ~%}
INTO "deleted_records"
FROM {{ tableName.currentSnapshot | quoteIdentifier }} snapshot
LEFT JOIN {{ tableName.input | quoteIdentifier }} input ON {{ snapshotInputJoinConditionSql }}
WHERE
    snapshot.{{ columnName.actual | quoteIdentifier }} = 1 AND
    input.{{ inputRandomColumn | quoteIdentifier }} IS NULL;
{% else -%}
-- Deleted records are not included in the snapshot, --
-- "has_deleted_flag" = false AND "keep_del_active" = false --
{% endif -%}

-- Merge partial results to the new snapshot. --
-- Incremental loading is used to load table in the storage, --
-- so old rows with the same primary key are overwritten. --
-- New last state: --
SELECT
    {{ snapshotPrimaryKeySelect }},
    {{ macro.selectFromColumns(snapshotAllColumnsExceptPk) }}
INTO {{ tableName.newSnapshot | quoteIdentifier }}
FROM "last_state"
    UNION
{% if generateDeletedRecords -%}
-- Deleted records: --
SELECT
    {{ snapshotPrimaryKeySelect }},
    {{ macro.selectFromColumns(snapshotAllColumnsExceptPk) }}
FROM "deleted_records"
    UNION
{% endif -%}
-- Modified previous state: --
SELECT
    {{ snapshotPrimaryKeySelect }},
    {{ macro.selectFromColumns(snapshotAllColumnsExceptPk) }}
FROM "previous_state";
